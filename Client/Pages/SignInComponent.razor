@page "/signin"
@using Core.Entities
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http
@using System.Net.Http.Json
@layout PatientLayout
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    /* Form container styling */
    .container1 {
        background: /* linear-gradient(135deg, black, red); */ var(--accent-color);
        padding: 1.5rem 2rem;  
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 100%;  
        text-align: center;
        color: #fff;
        animation: fadeIn 1s ease-out;
    }

    /* Welcome message container */
    .welcome-message-container {
        padding: 1.5rem 2rem; /* px-4 py-3 for consistent spacing */
    }

    /* Heading styles */
    .welcome-heading, .container1 h2 {
        font-size: 1.75rem; /* Base size, will scale with fs-* */
        margin-bottom: 1.25rem; /* mb-3 equivalent */
        font-weight: 700;
    }

    /* Welcome description */
    .welcome-description {
        font-size: 1rem; /* Base size, will scale */
        line-height: 1.6;
    }

    /* Message in form */
    .message {
        font-size: 1rem; /* Base size */
        margin-bottom: 1.5rem; /* mb-3 */
        color: #ddd;
    }

    /* Form inputs */
    .form-control {
        border-radius: 8px;
        border: 1px solid #ddd;
        padding: 0.75rem; /* Consistent with Bootstrap */
        font-size: 1rem;
        transition: all 0.3s ease-in-out;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.2);
        }

    /* Form labels */
    .form-label {
        font-size: 1rem; /* Base size */
    }

    /* Button styling */
    .btn {
        padding: 0.75rem; /* Consistent with Bootstrap */
        font-size: 1rem;
        border-radius: 5px;
        transition: all 0.3s ease-in-out;
    }
         
</style>
<div class="container-fluid min-vh-100 d-flex align-items-center justify-content-center px-3 px-lg-4">
    <div class="row w-100 align-items-center mx-auto" style="max-width: 1400px;">
        <!-- Left side: Welcome Message -->
        <div class="col-12 col-md-6 text-center text-md-start mb-4 mb-md-0 px-3 px-lg-4">
            <div class="welcome-message-container text-dark">
                <h2 class="welcome-heading fs-3 fs-lg-2">Welcome Back to DocDirect!</h2>
                <p class="welcome-description fs-5 fs-lg-4">Please sign in to access your account and manage appointments.</p>
            </div>
        </div>

        <!-- Right side: Sign-In Form -->
        <div class="col-12 col-md-6 px-3 px-lg-4">
            <div class="container1 mx-auto w-100 w-md-75 w-lg-50">
                <h2 class="text-center text-white fs-4 fs-lg-3">Sign In to DocDirect</h2>
                <p class="message">@Message</p>
                <EditForm Model="@signInModel" OnValidSubmit="@HandleSignIn">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label text-white fw-bold fs-5">Email address</label>
                        <InputText @bind-Value="signInModel.Email" class="form-control" placeholder="Enter email" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label text-white fw-bold fs-5">Password</label>
                        <InputText @bind-Value="signInModel.Password" class="form-control" placeholder="Enter password" type="password" />
                    </div>
                    <div class="d-grid">
                            <button type="submit" class="btn btn-dark">Sign In</button>
                    </div>
                </EditForm>
                <div class="d-grid mt-3">
                    <a href="/signup" class="btn btn-light text-dark">Create an Account</a>
                </div> 
            </div>
        </div>
    </div>
</div>
@code {
    private SignInViewModel signInModel = new();
    private LoginResponse? result;
    private string? Message { get; set; }
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var userId = await localStorage.GetItemAsync<string>("userId");

		if (userId != null)
		{
			Navigation.NavigateTo("/patient-dashboard");
		}

        base.OnInitialized();
        Message = "Enter your credentials";
    }

    private async Task HandleSignIn()
    {
        isLoading = true;
        Message = "Loading...";

        try
        {
            // Call your API endpoint for patient sign-in
            var response = await Http.PostAsJsonAsync("api/AuthApi/login", signInModel); 

            if (response.IsSuccessStatusCode)
            {
                result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                 
                await localStorage.SetItemAsync("userId", result.UserId);
                await localStorage.SetItemAsync("email", result.Email);
                await localStorage.SetItemAsync("name", result.Name);
                await JS.InvokeVoidAsync("showSignInMessage");
                Navigation.NavigateTo("/patient-dashboard"); 
            }
            else
            {
                var errorJson = await response.Content.ReadAsStringAsync();
                Message = $"Sign-in failed: Invalid Email or Password";
            }
        }
        catch (Exception ex)
        {
            Message = "An error occurred: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
    public class LoginResponse
    {
        public string Message { get; set; }
        public string UserId { get; set; }
        public string Email { get; set; }
        public string Name { get; set; }
    } 

}
