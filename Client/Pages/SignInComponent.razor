@page "/signin"
@using Core.Entities
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http
@using System.Net.Http.Json
@layout PatientLayout

<style>
    .container1 {
    background: linear-gradient(135deg, black, red);
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 500px;
    text-align: center;
    color: #fff;
    animation: fadeIn 1s ease-out;
    }

    h2 {
    font-size: 2rem;
    margin-bottom: 20px;
    font-weight: 700;
    }

    .message {
    font-size: 1.1rem;
    margin-bottom: 30px;
    color: #ddd;
    }

    .form-control {
    border-radius: 8px;
    border: 1px solid #ddd;
    padding: 15px;
    font-size: 1rem;
    transition: all 0.3s ease-in-out;
    }

    .form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.2);
    }

    .btn {
    width: 200px;
    padding: 12px;
    font-size: 1.1rem;
    border-radius: 5px;
    transition: all 0.3s ease-in-out;
    }

    .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
    }

    .btn-primary:hover {
    background-color: #0056b3;
    border-color: #0056b3;
    }

    .btn:hover {
    opacity: 0.9;
    transform: translateY(-2px);
    }

    .text-center a {
    font-size: 1rem;
    font-weight: 500;
    text-decoration: none;
    color: #007bff;
    }

    .text-center a:hover {
    text-decoration: underline;
    }

</style>
<div class="container-fluid min-vh-100 d-flex align-items-center justify-content-center">
    <div class="row w-100 align-items-center">
        <!-- Left side: Welcome Message -->
        <div class="col-12 col-md-6 text-center text-md-start mb-4 mb-md-0 px-4">
            <div class="welcome-message-container text-dark">
                <h2 class="welcome-heading">Welcome Back to DocDirect!</h2>
                <p class="welcome-description">Please sign in to access your account and manage appointments.</p>
            </div>
        </div>

        <!-- Right side: Sign-In Form -->
        <div class="col-12 col-md-6 px-4">
            <div class="container1">
                <h2 class="text-center text-white">Sign In to DocDirect</h2>
                <p>@Message</p>
                <EditForm Model="@signInModel" OnValidSubmit="@HandleSignIn">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label text-white fw-bold">Email address</label>
                        <InputText @bind-Value="signInModel.Email" class="form-control" placeholder="Enter email" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label text-white fw-bold">Password</label>
                        <InputText @bind-Value="signInModel.Password" class="form-control" placeholder="Enter password" type="password" />
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-dark w-100">Sign In</button>
                    </div>
                </EditForm>

                <div class="text-center mt-3">
                    Don't have an account?
                    <a href="/signup" class="text-primary">Sign Up</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private SignInViewModel signInModel = new();
    private string? Message { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Message = "Enter you Credentials";
    }
    // private async Task HandleSignIn()
    // {
    //     try
    //     {
    //         // Replace this with your real authentication API endpoint
    //         var response = await Http.PostAsJsonAsync("api/patient/signin", signInModel);
    //         if (response.IsSuccessStatusCode)
    //         {
    //             Message = "Sign in successful!";
    //             Navigation.NavigateTo("/dashboard"); // Replace with actual route
    //         }
    //         else
    //         {
    //             Message = "Invalid email or password.";
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Message = "An error occurred: " + ex.Message;
    //     }
    // }
    private async Task HandleSignIn()
    {
        // Show SweetAlert
        await JS.InvokeVoidAsync("showSignInMessage");

        // Simulate API call (replace with real auth logic)
        //await Task.Delay(4000);

        // After animation, continue logic
        Navigation.NavigateTo("/patient-dashboard");
    }
}
