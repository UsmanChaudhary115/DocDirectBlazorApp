@page "/patient-dashboard" 
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS 
@using Core.Entities
@layout PatientLayout
@using System.ComponentModel.DataAnnotations 
@inject Blazored.LocalStorage.ILocalStorageService localStorage 

<WelcomeCarousel WelcomeMessage="@WelcomeMessage"></WelcomeCarousel>
@* <a href="#chatSection" @onclick="openChat" class=" text-primary position-fixed bottom-0 start-0 mb-5">
    <i class="bi bi-chat-dots"></i></a> *@
<a href="#chatSection"
   @onclick="openChat"
   class="btn btn-outline-secondary d-flex align-items-center gap-2 px-3 py-2 rounded-pill shadow-sm"
   style="position: fixed; bottom: 20px; left: 20px; z-index: 9999;">
    <i class="bi bi-chat-dots-fill fs-5"></i>
    <span>Start Chat</span>
</a>

@if(isChatOpen)
{
    <ChatComponent></ChatComponent>
}
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
    @if (!string.IsNullOrWhiteSpace(SuccessMessage))
    {
        <div class="toast align-items-center text-bg-success border-0 shadow-sm" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="5000">
            <div class="d-flex">
                <div class="toast-body text-center w-100">
                    <i class="bi bi-check-circle-fill me-2"></i><strong>@SuccessMessage</strong>
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="toast align-items-center text-bg-danger border-0 shadow-sm" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="5000">
            <div class="d-flex">
                <div class="toast-body text-center w-100">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i><strong>@ErrorMessage</strong>
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    }
</div>


<!-- Appointments -->
<section class="py-5">
    <div class="container" data-aos="fade-up">
        <div class="container section-title" data-aos="fade-up">
            <h2 class="section-title text-center">Your Appointments</h2>
            <p class="text-muted text-center">Stay on top of your medical schedule with these options.</p>
        </div>
        <div class="row g-4">
            @if (appointments != null && appointments.Any())
            {
                @for (int i = 0; i < appointments.Count; i++)
                {
                    var appointment = appointments[i];
                    <div class="col-lg-4 col-md-6 col-sm-12">
                        <div class="card h-100 shadow-sm border-0 appointment-card" data-aos="fade-up" data-aos-delay="@((i + 1) * 100)">
                            <div class="card-body d-flex flex-column justify-content-between">
                                <div>
                                    <h5 class="card-title fw-bolder">@appointment.DoctorName</h5> 
                                    <p>@appointment.Description</p>
                                    <p class="card-text">
                                        <strong>Status:</strong>
                                        <span class="badge @(appointment.isApproved ? "bg-success text-white" : "bg-warning text-dark") p-2 rounded">
                                            @(appointment.isApproved ? "Approved" : "Pending")
                                        </span>

                                    </p> 
                                </div>
                                <div class="d-flex flex-column gap-2 mt-3">
                                    <a href="#appointmentDetails" @onclick="@(() => ViewAppointment(appointment.AppointmentId))" class="btn btn-outline-light btn-sm">View</a>
                                    <button @onclick="@(() => CancelAppointment(appointment.AppointmentId))" class="btn btn-outline-light btn-sm">Cancel</button>
                                    <a href="#appointment" class="btn btn-sm btn-outline-light"
                                    @onclick="() => EditAppointment(appointment.AppointmentId)"
                                    disabled="@IsPast(appointment.AppointmentDate)">
                                        Update
                                    </a>

                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center">
                    <div class="card shadow-sm border-0 py-5">
                        <div class="card-body">
                            <h5 class="text-danger">No Appointments Found</h5>
                            <p class="text-muted">You don't have any upcoming appointments at the moment.</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

@if(idToShow != null)
{
    <AppointmentDetails AppointmentId="@idToShow"></AppointmentDetails>
}


<!-- Appointments Booking-->
<section id="appointment" class="appointment section-bg py-5 light-background">
    <!-- Section Title -->
    <div class="container section-title" data-aos="fade-up">
        <h2>@(idToEdit == null ? "Appointment" : "Update Appointment")</h2>
        <p>@(idToEdit == null ? "Fill out the details below to make an appointment" : "Modify your appointment details below")</p>

    </div>

    <div class="container" data-aos="fade-up" data-aos-delay="100">
        <EditForm Model="@appointmentForm" OnValidSubmit="SubmitAppointment">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />

            <div class="row g-3 mt-3">
                <!-- Date and Time -->
                <div class="col-md-6">
                    <label for="appointmentDate" class="form-label">Date and Time</label>
                    <InputDate @bind-Value="appointmentForm.AppointmentDate"
                    id="appointmentDate"
                    class="form-control" 
                    @onchange="OnDateChanged"/> 
                </div>

                <!-- Doctor Selection -->
                <div class="col-md-6">
                    <label for="doctorSelect" class="form-label">Select Doctor</label>
                    <InputSelect id="doctorSelect"
                    class="form-select"
                    @bind-Value="appointmentForm.DoctorId"
                    disabled="@(!IsDateSelected)" title="Select Doctor">
                        <option value="">--Select Doctor--</option>
                        @foreach (var doctor in GetAvailableDoctors())
                        {
                            <option value="@doctor.DoctorId">@doctor.Name (@doctor.Specialization)</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <!-- Description -->
            <div class="mt-4">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description"
                class="form-control"
                @bind-Value="appointmentForm.Description"
                rows="4"
                disabled="@(!IsDateSelected)"/>
            </div>

            <!-- Submit Button -->
            <div class="text-center mt-4">
                <button type="submit"
                class="btn px-4 py-2 shadow text-light" style="background: var(--accent-color);"
                disabled="@(!IsDateSelected || appointmentForm.DoctorId < 0)">
                    <i class="bi bi-calendar-check-fill text-light me-2"></i>
                    @(idToEdit == null ? "Make an Appointment" : "Update Appointment")
                </button>
            </div>
        </EditForm>
    </div>
</section>


<!-- Doctor -->
<section class="py-5" id="doctor-department">
    <section id="doctors" class="doctors section">
        <div class="container section-title" data-aos="fade-up">
            <h2>Doctors</h2>
            <p>Meet our team of highly skilled doctors</p>
        </div>
        <div class="container">
            <input class="form-control mb-4" placeholder="Search doctors" @bind="searchQuery" @bind:event="oninput" />
            <div class="row gy-4">
                @if (doctors != null && doctors.Any())
                {
                    @foreach (var doctor in FilterDoctors())
                    {
                        <div class="col-lg-6" data-aos="fade-up">
                            <div class="team-member d-flex align-items-start">
                                <div class="member-info">
                                    <h4>@doctor.Name</h4>
                                    <span>@doctor.Specialization</span>
                                    <div class="social">
                                        <a href=@doctor.XAccountLink><i class="bi bi-twitter-x"></i></a>
                                        <a href=@doctor.FacebookAccountLink><i class="bi bi-facebook"></i></a>
                                        <a href=@doctor.InstagramAccountLink><i class="bi bi-instagram"></i></a>
                                        <a href=@doctor.LinkedinAccountLink><i class="bi bi-linkedin"></i></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No doctors available at the moment.</p>
                }
            </div>
        </div>
    </section>


    <!-- Department Overview -->
    <div class="row mt-5" data-aos="fade-up" data-aos-delay="100">
        <div class="col-12 m-3">
            <h4 class="mb-3">Departments</h4>
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="p-3 border rounded bg-white shadow-sm">🏥 Cardiology</div>
                </div>
                <div class="col-md-4">
                    <div class="p-3 border rounded bg-white shadow-sm">🦴 Orthopedics</div>
                </div>
                <div class="col-md-4">
                    <div class="p-3 border rounded bg-white shadow-sm">🧠 Neurology</div>
                </div>
            </div>
        </div>
    </div>

</section>



@code {
    private string userId;
    private string email;
    private string name;
    private string? WelcomeMessage;
    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }
    private int? idToEdit { get; set; }
    private int? idToShow { get; set; }
    private List<Doctor> doctors;
    List<AppointmentDTO> appointments;

    private async Task ViewAppointment(int id)
    {
        SuccessMessage = $"Viewing appointment.";
        ErrorMessage = null;
        idToShow = id; 
        await JS.InvokeVoidAsync("initializeToasts");
    }

    private async Task CancelAppointment(int id)
    {
        // bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this appointment?");
        // if (!confirmed)
        //     return;

        var result = await JS.InvokeAsync<System.Text.Json.JsonElement>("Swal.fire", new
        {
            title = "Are you sure?",
            text = "Do you really want to cancel this appointment?",
            icon = "warning",
            showCancelButton = true,
            confirmButtonColor = "#d33",
            cancelButtonColor = "#6c757d",
            confirmButtonText = "Yes, cancel it",
            cancelButtonText = "No, keep it"
        });

        if (result.TryGetProperty("isConfirmed", out var isConfirmed) && isConfirmed.GetBoolean())
        {
            // Proceed with cancellation
            var response = await Http.DeleteAsync($"api/AppointmentDTO/DeleteAppointmentDTO/{id}");
            if (response.IsSuccessStatusCode)
            {
                var response2 = await Http.DeleteAsync($"api/Appointment/DeleteAppointment/{id}");
                if (response2.IsSuccessStatusCode)
                {
                    appointments.RemoveAll(a => a.AppointmentId == id);
                    ErrorMessage = $"Appointment canceled successfully.";
                }
                else
                {
                    await Http.PutAsJsonAsync($"api/AppointmentDTO/CreateAppointmentDTO", appointments.FirstOrDefault(a => a.AppointmentId == id));
                    ErrorMessage = $"Failed to cancel appointment.";
                }

            }
            else
            {
                ErrorMessage = $"Failed to cancel appointment.";
            }
            await JS.InvokeVoidAsync("initializeToasts");
        }
        else
        {
            // User cancelled
            return;
        }
    }

    private async Task EditAppointment(int id)
    {
        var appt = appointments.FirstOrDefault(a => a.AppointmentId == id);
        if (appt != null)
        {
            if (IsPast(appt.AppointmentDate))
            {
                ErrorMessage = "You cannot edit past appointments.";
                await JS.InvokeVoidAsync("initializeToasts");
                return;
            }

            appointmentForm = new AppointmentFormModel
            {
                AppointmentId = appt.AppointmentId,
                AppointmentDate = appt.AppointmentDate, 
                Description = appt.Description,
                DoctorId = appt.DoctorId
            };

            idToEdit = id;
            SuccessMessage = $"Editing appointment.";
            await JS.InvokeVoidAsync("initializeToasts");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        userId = await localStorage.GetItemAsync<string>("userId");
        if (string.IsNullOrEmpty(userId))
        {
            // Not logged in — redirect to signin
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Access Denied",
                text = "You must be logged in to access this page.",
                icon = "warning",
                confirmButtonText = "OK"
            });
            Nav.NavigateTo("/signin", forceLoad: true); 

        }
        else
        {
            email = await localStorage.GetItemAsync<string>("email");
            name = await localStorage.GetItemAsync<string>("name");
            WelcomeMessage = $"Welcome {name}!"; 
            appointments = await Http.GetFromJsonAsync<List<AppointmentDTO>>($"api/AppointmentDTO/GetAppointmentDTOsByPatientId/{userId}");
            doctors = await Http.GetFromJsonAsync<List<Doctor>>("/api/Doctors/GetAllDoctors");
            await JS.InvokeVoidAsync("initializeToasts");
        }
    }  

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!string.IsNullOrWhiteSpace(SuccessMessage) || !string.IsNullOrWhiteSpace(ErrorMessage))
        {
            await JS.InvokeVoidAsync("initializeToasts");
            // Optionally clear the message after showing the toast
            SuccessMessage = null;
            ErrorMessage = null;
        } 
        idToShow = null;
    }

    private string searchQuery = "";

    private AppointmentFormModel appointmentForm = new();

    private List<Doctor> FilterDoctors() =>
        doctors.Where(d => d.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           d.Specialization.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

    private async Task SubmitAppointment()
    { 
        if (appointmentForm.AppointmentId == 0)
        {
            // Creating new appointment 
            Appointment appointment = new Appointment { PatientId = userId, AppointmentDate = appointmentForm.AppointmentDate, Description = appointmentForm.Description, DoctorId = appointmentForm.DoctorId, isApproved = false};
            var response = await Http.PostAsJsonAsync<Appointment>($"api/Appointment/CreateAppointment", appointment);
            if(response.IsSuccessStatusCode)
            {
                SuccessMessage = "Appointment created!";
                appointments.Add(new AppointmentDTO
                    {
                        AppointmentId = appointment.AppointmentId,
                        AppointmentDate = appointment.AppointmentDate,
                        DoctorName = doctors[appointmentForm.DoctorId - 1].Name, // Assuming DoctorId is 1-based index
                        Description = appointmentForm.Description,
                        isApproved = false // New appointments are pending by default
                    });
            }
            else
            {
                ErrorMessage = "Failed!";
            }
        }
        else
        {
            // Updating existing appointment
            var existing = appointments.FirstOrDefault(a => a.AppointmentId == appointmentForm.AppointmentId);
            if (existing != null)
            {
                //Updating AppointmentDTO for UI
                existing.AppointmentDate = appointmentForm.AppointmentDate;
                existing.DoctorName = doctors[appointmentForm.DoctorId - 1].Name; 
                existing.Description = appointmentForm.Description;
                existing.isApproved = false; // mark as pending after update
                SuccessMessage = "Appointment updated successfully!";
                
                //Creating Appointment Model for API call
                var appointmentModel = new Appointment
                {
                    AppointmentId = appointmentForm.AppointmentId,
                        AppointmentDate = appointmentForm.AppointmentDate,
					PatientId = userId,
                    DoctorId = appointmentForm.DoctorId,
                    Description = existing.Description,
                    isApproved = false // mark as pending after update
                };
                await Http.PutAsJsonAsync($"api/Appointment/UpdateAppointment/{appointmentForm.AppointmentId}", appointmentModel);
            }
			else
			{
				ErrorMessage = "Appointment not found!"; 
			}
        }

        await JS.InvokeVoidAsync("initializeToasts");
        appointmentForm = new(); // reset form
        idToEdit = null; // clear edit state
        Nav.NavigateTo("/patient-dashboard");
    }


    public class AppointmentFormModel
    {
        public int AppointmentId { get; set; }  // NEW: To support editing
        public DateTime AppointmentDate { get; set; }
        public int DoctorId { get; set; }

        [Required(ErrorMessage = "Description is required.")]
        public string Description { get; set; } = string.Empty;
    }
     
    private bool IsDateSelected => appointmentForm.AppointmentDate != default;

    private List<Doctor> GetAvailableDoctors()
{
    if (!IsDateSelected) return new List<Doctor>();

    var selectedDate = appointmentForm.AppointmentDate.Date;

    // Get doctors already booked on this date
    var bookedDoctors = appointments
        .Where(a => a.AppointmentDate.Date == selectedDate)
        .Select(a => a.DoctorName)
        .ToList();

    // Get the name of the doctor currently selected in the form
    var selectedDoctor = doctors.FirstOrDefault(d => d.DoctorId == appointmentForm.DoctorId);
    var selectedDoctorName = selectedDoctor?.Name;

    // Return doctors not booked OR the currently selected one
    return doctors
        .Where(d => !bookedDoctors.Contains(d.Name) || d.Name == selectedDoctorName)
        .ToList();
}

    private void OnDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newDate))
        {
            appointmentForm.AppointmentDate = newDate;
            appointmentForm.DoctorId = 0; // Reset doctor selection
        }
    }

    bool isChatOpen = false;
    void openChat()
    {
        isChatOpen = true;
    }
    private bool IsPast(DateTime date)
    {
        return date.Date < DateTime.Today;
    }

}
