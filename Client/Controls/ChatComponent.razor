@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JS
@inject HttpClient Http

<section id="chatSection" data-aos="fade-up">
    <div class="d-flex justify-content-center">
        <header class="chat-header p-3" style="min-width: 70%;">
            <h2 class="text-white fw-bolder">@otherPartnerName</h2>
        </header>
    </div>

    <div id="chatContainer" class="chat-container">
        @foreach (var msg in messages)
        {
            <div class="message-wrapper @(msg.SenderId == currentUserId ? "sent" : "received")">
                <div class="message-bubble">
                    <p class="message-content">@msg.Content</p>
                    <span class="message-time">@msg.Timestamp.ToLocalTime().ToString("hh:mm tt")</span>
                </div>
            </div>
        }

        @if (isLoading)
        {
            <div class="text-center mt-2">
                <span class="spinner-border text-primary spinner-border-sm" role="status"></span>
                <span class="ms-2">Gemini is thinking...</span>
            </div>
        }
    </div>

    <div class="chat-input-section bg-light p-3 shadow-sm rounded-bottom" style="max-width: 70%; margin: auto;">
        <div class="input-group">
            <input @bind="newMessage" @bind:event="oninput"
                   type="text"
                   class="form-control rounded-start-pill px-4 py-2"
                   placeholder="Type your message..."
                   @onkeypress="HandleKeyPress" />

            <button class="btn btn-primary rounded-end-pill px-4"
                    type="button"
                    @onclick="SendMessage">
                <i class="bi bi-send-fill"></i>
            </button>
        </div>
    </div>
</section>

<style>
    .chat-header {
        background: var(--accent-color);
        border-radius: 10px 10px 0 0;
        font-size: 1.5rem;
        text-align: start;
    }

    .chat-input-section input:focus {
        box-shadow: none;
        border-color: var(--accent-color);
    }

    .chat-container {
        max-height: 60vh;
        overflow-y: auto;
        padding: 1rem;
        background: #f8f9fa;
    }

    .message-wrapper {
        display: flex;
        margin-bottom: 0.5rem;
    }

        .message-wrapper.sent {
            justify-content: flex-end;
        }

        .message-wrapper.received {
            justify-content: flex-start;
        }

    .message-bubble {
        max-width: 60%;
        background-color: #e2e3e5;
        padding: 0.75rem;
        border-radius: 1rem;
        position: relative;
    }

    .message-wrapper.sent .message-bubble {
        background-color: var(--accent-color);
    }

    .message-time {
        font-size: 0.7rem;
        color: #6c757d;
        display: block;
        text-align: right;
        margin-top: 0.25rem;
    }

    .message-wrapper.sent .message-time {
        font-size: 0.7rem;
        color: white ;
        display: block;
        text-align: right;
        margin-top: 0.25rem;
    }
</style>

@code {
    private string newMessage;
    private string currentUserId = "user123";
    private string otherPartnerName = "DocDirectBot";
    private List<ChatMessage> messages = new();
    private bool isLoading;

    public class ChatMessage
    {
        public string SenderId { get; set; }
        public string Content { get; set; }
        public DateTime Timestamp { get; set; }
    }

    public class GeminiResponse
    {
        public string Reply { get; set; }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage)) return;

        var userMsg = new ChatMessage
            {
                SenderId = currentUserId,
                Content = newMessage,
                Timestamp = DateTime.Now
            };

        messages.Add(userMsg);
        var userInput = newMessage;
        newMessage = string.Empty;
        await ScrollToBottom();

        await GetGeminiReply(userInput);
    }

    private async Task GetGeminiReply(string prompt)
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            string message = "You are a friendly chatbot for DocDirect, a system where patients can book doctor appointments, view appointment details, and get updates. Only answer questions about how DocDirect works. Keep replies short, simple, and patient-friendly.Respond to this user query within the scope of DocDirect only: Your job is to explain how the system works to end-users.Do not provide technical answers, code, or suggestions outside the existing system features. Stay within the system’s current functionality only. Respond to the following user query based strictly on this system dont use formatting: " + prompt;
            var response = await Http.PostAsJsonAsync("/api/Gemini/ask", new { Prompt = message });

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<GeminiResponse>();
                var replyMsg = new ChatMessage
                    {
                        SenderId = "Gemini",
                        Content = json?.Reply ?? "No response",
                        Timestamp = DateTime.Now
                    };
                messages.Add(replyMsg);
            }
            else
            {
                messages.Add(new ChatMessage
                    {
                        SenderId = "System",
                        Content = $"Error: {response.ReasonPhrase}",
                        Timestamp = DateTime.Now
                    });
            }
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage
                {
                    SenderId = "System",
                    Content = $"Error: {ex.Message}",
                    Timestamp = DateTime.Now
                });
        }

        isLoading = false;
        StateHasChanged();
        await ScrollToBottom();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottomOfChat");
    }
}


@* 
@code {
    private string newMessage = "";

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessage))
        {
            // Call your sending logic
            //await SendChatMessageAsync(newMessage);
            messages.Add(new Message { Id = messages.Count + 1, SenderId = currentUserId, ReceiverId = "doctor1", Content = newMessage, Timestamp = DateTime.UtcNow });
            newMessage = "";
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
    string currentUserId = "patient1";
    string otherPartnerName = "Dr. John Doe";

    List<Message> messages = new List<Message>
    {
        new Message { Id = 1, SenderId = "patient1", ReceiverId = "doctor1", Content = "Hello doctor, I have a headache.", Timestamp = DateTime.UtcNow.AddMinutes(-30) },
        new Message { Id = 2, SenderId = "doctor1", ReceiverId = "patient1", Content = "Hi! Since when have you had it?", Timestamp = DateTime.UtcNow.AddMinutes(-29) },
        new Message { Id = 3, SenderId = "patient1", ReceiverId = "doctor1", Content = "It's been bothering me since last night.", Timestamp = DateTime.UtcNow.AddMinutes(-28) },
        new Message { Id = 4, SenderId = "doctor1", ReceiverId = "patient1", Content = "Do you have any other symptoms like fever or nausea?", Timestamp = DateTime.UtcNow.AddMinutes(-26) },
        new Message { Id = 5, SenderId = "patient1", ReceiverId = "doctor1", Content = "I felt a little nauseous in the morning.", Timestamp = DateTime.UtcNow.AddMinutes(-25) },
        new Message { Id = 6, SenderId = "doctor1", ReceiverId = "patient1", Content = "Alright. Have you taken any medication so far?", Timestamp = DateTime.UtcNow.AddMinutes(-24) },
        new Message { Id = 7, SenderId = "patient1", ReceiverId = "doctor1", Content = "I took a paracetamol but it didn’t help much.", Timestamp = DateTime.UtcNow.AddMinutes(-22) },
        new Message { Id = 8, SenderId = "doctor1", ReceiverId = "patient1", Content = "Okay. I recommend staying hydrated and resting.", Timestamp = DateTime.UtcNow.AddMinutes(-20) },
        new Message { Id = 9, SenderId = "doctor1", ReceiverId = "patient1", Content = "If it persists tomorrow, come in for a checkup.", Timestamp = DateTime.UtcNow.AddMinutes(-19) },
        new Message { Id = 10, SenderId = "patient1", ReceiverId = "doctor1", Content = "Sure, thank you so much!", Timestamp = DateTime.UtcNow.AddMinutes(-18) }
    };

    public class Message
    {
        public int Id { get; set; }

        [Required]
        public string SenderId { get; set; }

        [Required]
        public string ReceiverId { get; set; }

        [Required]
        public string Content { get; set; }

        public DateTime Timestamp { get; set; } = DateTime.UtcNow;

        public bool IsRead { get; set; } = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("scrollToBottomOfChat");
    }
} *@
